@tailwind base;
@tailwind components;
@tailwind utilities;

/* ==========================================================================
   CUBE CSS Architecture: Composition → Utility → Block → Exception
   ========================================================================== */

/* Font Variables (for Next.js font integration) */
:root {
  --ff-primary: var(--font-open-sans);
  --ff-secondary: var(--font-lora);
}

/* ==========================================================================
   BASE LAYER - Global element styles
   ========================================================================== */

@layer base {
  html {
    color-scheme: light;
  }

  body {
    @apply bg-white font-primary text-400 font-regular text-neutral-600;
    line-height: 1.7;
  }

  h1,
  h2,
  h3,
  h4,
  p {
    max-width: 65ch; /* limit character for optimal readability */
    margin-inline: auto; /* Center text content within containers */
  }

  h1,
  h2,
  h3,
  h4 {
    @apply font-black text-accent-400;
    line-height: 1;
  }

  h1 {
    @apply text-900;
  }

  h2 {
    @apply text-600;
  }

  h3 {
    @apply text-500;
  }

  h4 {
    @apply text-400 font-bold;
  }

  a {
    @apply text-accent-400;
    &:hover {
      @apply text-accent-600;
    }
  }

  /* Smooth scroll behavior with reduced motion support */
  @media (prefers-reduced-motion: no-preference) {
    :has(:target) {
      scroll-behavior: smooth;
      scroll-padding-top: 3rem;
    }
  }
}

/* ==========================================================================
   COMPOSITION LAYER - Layout patterns (CUBE CSS)
   ========================================================================== */

/* Flow: Vertical rhythm with consistent spacing */
.flow > :where(:not(:first-child)) {
  margin-block-start: 1rem;
}

.flow-lg > :where(:not(:first-child)) {
  margin-block-start: 2rem;
}

/* Flex utilities for horizontal layouts */
.flex-row {
  display: flex;
  gap: 1em;
}

.flex-row-lg {
  display: flex;
  gap: 2em;
}

/* Grid stack with consistent gap */
.grid-stack {
  display: grid;
  gap: 1em;
}

/* ==========================================================================
   COMPONENTS LAYER - Reusable block components
   ========================================================================== */

@layer components {
  /* Section spacing */
  section {
    @apply py-20 px-8;
  }

  @media (min-width: 800px) {
    section {
      @apply px-20;
    }
  }

  @media (min-width: 1000px) {
    section {
      @apply px-40;
    }
  }

  /* Section titles */
  .section-title {
    @apply text-600 font-black text-accent-400;
  }

  .section-title[data-accent] {
    position: relative;

    &::after {
      content: "";
      display: block;
      width: 2em;
      height: 1px;
      margin: 0.5em auto 0;
      @apply bg-accent-400 opacity-25;
    }
  }

  .section-subtitle {
    @apply text-500 font-bold;
  }

  /* Button component */
  button,
  .button {
    @apply inline-block px-4 py-2 no-underline cursor-pointer;
    @apply text-100 uppercase tracking-wider font-black;
    @apply border border-solid border-accent-400 bg-transparent;
    @apply transition-transform duration-200 ease-in-out;
    color: inherit;

    &:hover {
      transform: scale(1.1);
    }

    &:focus {
      @apply outline outline-2 outline-accent-400 outline-offset-[3px];
    }
  }

  .button[data-variant="primary"] {
    @apply text-neutral-900 bg-accent-400;
  }

  .button[data-variant="secondary"] {
    @apply border-accent-400 text-inherit;
  }
}

/* ==========================================================================
   UTILITIES LAYER - Single-purpose utility classes
   ========================================================================== */

@layer utilities {
  /* Use Tailwind utilities via className:
     - Colors: text-neutral-100, bg-accent-400
     - Typography: text-500, font-bold
     - Spacing: p-4, mx-auto, gap-2
     - Layout: flex, grid, etc.
  */
}
